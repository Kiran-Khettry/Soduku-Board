var cells = []; // array with all cells 0-80

function import_puzzle () {
    var soduku1 = [[0,0,0,2,6,0,7,0,1],
                [6,8,0,0,7,0,0,9,0],
                [1,9,0,0,0,4,5,0,0],
                [8,2,0,1,0,0,0,4,0],
                [0,0,4,6,0,2,9,0,0],
                [0,5,0,0,0,3,0,2,8],
                [0,0,9,3,0,0,0,7,4],
                [0,4,0,0,5,0,0,3,6],
                [7,0,3,0,1,8,0,0,0]];

    return soduku1;
}

function soduku_GUI() {
    var table = document.getElementById("gui"); // table from html

    // creates all the cells, assigns row, column and square
    for (var c = 0; c < 9; c++) {
        var row = document.createElement("tr"); // row element

        for (var r = 0; r < 9; r++) {
            var input = document.createElement("input"); // cell input field
            // sets all of the cell attributes
            input.type = "text";
            input.maxLength = 1;
            input.row = r;
            input.column = c;
            input.square = square_number(r, c);
            input.onketpress = validate; // validates that a number is entered

            // creates and places inout field in cell element
            var cell = document.createElement("td");
            cell.appendChild(input);

            row.appendChild(cell); // puts cell into row
            cells.push(input); // puts cell into array with other cells
        }
        table.appendChild(row); // places row into the table
    }
}
function validate(evt) {
    // stops all non-numeric input
    evt = (evt) ? evt: window.Event;
    var key = evt.keyCode || evt.which;
    key = String.fromCharCode(key);

    var regex = /[0-9]|\./;
    if ( !regex.test(key) ) {
        evt.returnValue = false;
        if (evt.preventDefault) { evt.preventDefault(); }
    }
}

function square_number(row, column) {
    // this function returns square number of cell with position x, y
    if (row < 3 && column < 3) { return 0;}
    if (row > 2 && row < 6 && column < 3) { return 1; }
    if (row > 5 && column < 3) { return 2;}
    if (row < 3 && column > 2 && column < 6) { return 3;}
    if (row > 2 && row < 6 && column > 2 && column < 6) { return 4;}
    if (row > 5 && column > 2 && column < 6) { return 5;}
    if (row < 3 && column > 5) { return 6;}
    if (row > 2 && row < 6 && column > 5) { return 7;}
    if (row > 5 && column > 5) { return 8;}
}

function valid_check() {
    // this function check if value is valid, will follow standard soduku rules
    for (var i = 0; i < cells.length; i++) {
        if (cells[i].row == cell.row && cells[i].value == value) {
            return false;
        } else if (cells[i].column == cell.column && cells[i].value == value) {
            return false;
        } else if (cells[i].square == cell.square && cells[i].value == value) {
            return false;
        }
    }
    return true;
}

function solve_soduku(random_row) {
    var numbers = [1,2,3,4,5,6,7,8,9];
    var i = 0; // cell index
    var n = 0; // numbers-array index
    var m = 1; // direction of backtracking (1 = forward)

    var nums = [1,2,3,4,5,6,7,8,9]; // used if generating soduku (g=1)

    while (true) {
        // creates a random first row if generating
        if (i < 9 && random_row) {
            var random_value = nums[Math.floor(Math.random()*nums.length)];
            nums.splice(nums.indexOf(random_value), 1); // removes used value
            cells[i].value = random_value; // assigns value
            i++; // next cell
        } else if (cells[i].a == 1) { // tries to solve cell
            if (valid_check(cells[i], numbers[n])) { // runs if valid number is found
                cells[i].value = numbers[n]; // assigns value
                i++;
                n = 0;
                m = 1;
            } else {
                if (n == 8) { // runs if at the end of the numbers array (no more possible values)
                    cells[i].value = 0; // removes value
                    i--; // steps to previous cell
                    m = 0; // backwards direction
                    if (cells[i].value == 9) { i--; }
                    n = cells[i].value;
                } else { // runs if no valid value has been found and not at the end of possible values
                    n++; // next number in numbers array
                }
            }
        } else { // runs if hit a cell with static value, moves backwards or forwards based on m
            if (m) { i++; }
                else { i--; }
        }
        if (i == 81) { break; } // stops the loop after last cell
    }
}

function generate_soduku() {
    // generates soduku board
    for (cell of cells) { cell.a = 1; } // makes all cells able to be edited
    solve_soduku(true); // the soduku is solved with a random first row -> soduku is created

    for (cell of cells) { // turns random cells blank
        if (Math.floor((Math.random() * 3)) == 0) { cell.value = ""; }
    }

    for (cell of cells) { // locks cells with values
        if (cell.value > 0) { cell.a = 0; }
    }
}

function load_soduku() {
    var i = 0;
    var soduku = import_puzzle();
    for (var c = 0; c < 9; c++) {
        for ( var r = 0; r < 9; r++) {
            if (soduku[c][r] != 0) {
                cells[i].value = soduku[c][r];
            } else {
                cells[i].a = 1; // unlocks cells without values
            }
            i++;
        }
    }
}

function clear_gui() {
    for (cells of cells) {
        cell.value = ""; // removes value
        cell.a = 0;      // locks all cells
    }
}

soduku_GUI();